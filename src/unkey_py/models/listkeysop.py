"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .httpmetadata import HTTPMetadata, HTTPMetadataTypedDict
from .key import Key, KeyTypedDict
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict
from unkey_py.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from unkey_py.utils import FieldMetadata, QueryParamMetadata


class ListKeysRequestTypedDict(TypedDict):
    api_id: str
    limit: NotRequired[int]
    cursor: NotRequired[str]
    owner_id: NotRequired[str]
    external_id: NotRequired[str]
    decrypt: NotRequired[Nullable[bool]]
    revalidate_keys_cache: NotRequired[Nullable[bool]]


class ListKeysRequest(BaseModel):
    api_id: Annotated[
        str,
        pydantic.Field(alias="apiId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 100

    cursor: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    owner_id: Annotated[
        Optional[str],
        pydantic.Field(alias="ownerId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    external_id: Annotated[
        Optional[str],
        pydantic.Field(alias="externalId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None

    decrypt: Annotated[
        OptionalNullable[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    revalidate_keys_cache: Annotated[
        OptionalNullable[bool],
        pydantic.Field(alias="revalidateKeysCache"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = False

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "limit",
            "cursor",
            "ownerId",
            "externalId",
            "decrypt",
            "revalidateKeysCache",
        ]
        nullable_fields = ["decrypt", "revalidateKeysCache"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class ListKeysResponseBodyTypedDict(TypedDict):
    r"""List of keys for the api"""

    keys: List[KeyTypedDict]
    total: int
    r"""The total number of keys for this api. This is an approximation and may lag behind up to 5 minutes."""
    cursor: NotRequired[str]
    r"""The cursor to use for the next page of results, if no cursor is returned, there are no more results"""


class ListKeysResponseBody(BaseModel):
    r"""List of keys for the api"""

    keys: List[Key]

    total: int
    r"""The total number of keys for this api. This is an approximation and may lag behind up to 5 minutes."""

    cursor: Optional[str] = None
    r"""The cursor to use for the next page of results, if no cursor is returned, there are no more results"""


class ListKeysResponseTypedDict(TypedDict):
    http_meta: HTTPMetadataTypedDict
    object: NotRequired[ListKeysResponseBodyTypedDict]
    r"""List of keys for the api"""


class ListKeysResponse(BaseModel):
    http_meta: Annotated[Optional[HTTPMetadata], pydantic.Field(exclude=True)] = None

    object: Optional[ListKeysResponseBody] = None
    r"""List of keys for the api"""
