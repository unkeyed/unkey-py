"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .httpmetadata import HTTPMetadata, HTTPMetadataTypedDict
from .key import Key, KeyTypedDict
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict
from unkey_py.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from unkey_py.utils import FieldMetadata, QueryParamMetadata


class GetKeyRequestTypedDict(TypedDict):
    key_id: str
    decrypt: NotRequired[Nullable[bool]]


class GetKeyRequest(BaseModel):
    key_id: Annotated[
        str,
        pydantic.Field(alias="keyId"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ]

    decrypt: Annotated[
        OptionalNullable[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = UNSET

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["decrypt"]
        nullable_fields = ["decrypt"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m


class GetKeyResponseTypedDict(TypedDict):
    http_meta: HTTPMetadataTypedDict
    key: NotRequired[KeyTypedDict]
    r"""The configuration for a single key"""


class GetKeyResponse(BaseModel):
    http_meta: Annotated[Optional[HTTPMetadata], pydantic.Field(exclude=True)] = None

    key: Optional[Key] = None
    r"""The configuration for a single key"""
